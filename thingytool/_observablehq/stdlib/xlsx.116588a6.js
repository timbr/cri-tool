var $=Object.defineProperty;var a=(r,e)=>$(r,"name",{value:e,configurable:!0});var c;import N from"../../_npm/exceljs@4.4.0/130ea17b.js";var j=Object.defineProperty,s=a((r,e)=>j(r,"name",{value:e,configurable:!0}),"u");const v=(c=class{constructor(e){Object.defineProperties(this,{_:{value:e},sheetNames:{value:e.worksheets.map(t=>t.name),enumerable:!0}})}static async load(e){const t=new N.Workbook;return await t.xlsx.load(e),new c(t)}sheet(e,t){const o=typeof e=="number"?this.sheetNames[e]:this.sheetNames.includes(e=`${e}`)?e:null;if(o==null)throw new Error(`Sheet not found: ${e}`);const n=this._.getWorksheet(o);return y(n,t)}},a(c,"d"),c);s(v,"Workbook");let O=v;function y(r,{range:e,headers:t}={}){let[[o,n],[f,h]]=g(e,r);const b=t?r._rows[n++]:null;let u=new Set(["#"]);for(let l=o;l<=f;l++){const m=b?w(b.findCell(l+1)):null;let i=m&&m+""||C(l);for(;u.has(i);)i+="_";u.add(i)}u=new Array(o).concat(Array.from(u));const p=new Array(h-n+1);for(let l=n;l<=h;l++){const m=p[l-n]=Object.create(null,{"#":{value:l+1}}),i=r.getRow(l+1);if(i.hasValues)for(let d=o;d<=f;d++){const k=w(i.findCell(d+1));k!=null&&(m[u[d+1]]=k)}}return p.columns=u.filter(()=>!0),p}a(y,"C"),s(y,"extract");function w(r){if(!r)return;const{value:e}=r;if(e&&typeof e=="object"&&!(e instanceof Date)){if(e.formula||e.sharedFormula)return e.result&&e.result.error?NaN:e.result;if(e.richText)return x(e);if(e.text){let{text:t}=e;return t.richText&&(t=x(t)),e.hyperlink&&e.hyperlink!==t?`${e.hyperlink} ${t}`:t}return e}return e}a(w,"v"),s(w,"valueOf");function x(r){return r.richText.map(e=>e.text).join("")}a(x,"y"),s(x,"richText");function g(r=":",{columnCount:e,rowCount:t}){if(r=`${r}`,!r.match(/^[A-Z]*\d*:[A-Z]*\d*$/))throw new Error("Malformed range specifier");const[[o=0,n=0],[f=e-1,h=t-1]]=r.split(":").map(A);return[[o,n],[f,h]]}a(g,"$"),s(g,"parseRange");function C(r){let e="";r++;do e=String.fromCharCode(64+(r%26||26))+e;while(r=Math.floor((r-1)/26));return e}a(C,"N"),s(C,"toColumn");function A(r){const[,e,t]=r.match(/^([A-Z]*)(\d*)$/);let o=0;if(e)for(let n=0;n<e.length;n++)o+=Math.pow(26,e.length-n-1)*(e.charCodeAt(n)-64);return[o?o-1:void 0,t?+t-1:void 0]}a(A,"b"),s(A,"fromCellReference");export{O as Workbook};
